/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    members: MemberAuthOperations;
  };
  blocks: {};
  collections: {
    media: Media;
    members: Member;
    ranks: Rank;
    products: Product;
    sessions: Session;
    orders: Order;
    payments: Payment;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    members: MembersSelect<false> | MembersSelect<true>;
    ranks: RanksSelect<false> | RanksSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    sessions: SessionsSelect<false> | SessionsSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    payments: PaymentsSelect<false> | PaymentsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    settings: Setting;
  };
  globalsSelect: {
    settings: SettingsSelect<false> | SettingsSelect<true>;
  };
  locale: null;
  user: Member & {
    collection: 'members';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface MemberAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  /**
   * Alternativtext für Barrierefreiheit
   */
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "members".
 */
export interface Member {
  id: string;
  /**
   * Systemrolle für Berechtigungen. Bartender wird über Sitzungen zugewiesen.
   */
  role: 'admin' | 'member';
  firstName: string;
  lastName: string;
  couleurname: string;
  /**
   * Optional: Profilbild hochladen
   */
  profilePicture?: (string | null) | Media;
  /**
   * Rang des Mitglieds - bitte aus Ränge-Sammlung auswählen
   */
  rank?: (string | null) | Rank;
  /**
   * Wird automatisch bei Bestellungen und Zahlungen aktualisiert
   */
  tabBalance?: number | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ranks".
 */
export interface Rank {
  id: string;
  label: string;
  /**
   * Eindeutiger Wert für den Rang (z.B. "fuchs", "bursche")
   */
  value: string;
  colors: {
    /**
     * Hex-Farbwert (z.B. #E10909)
     */
    color: string;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  name: string;
  /**
   * Preis in EUR
   */
  price: number;
  /**
   * z.B. Getränke, Toast, Zigarren, Snus, etc.
   */
  category?: string | null;
  available?: boolean | null;
  /**
   * Markiert beliebte oder häufig bestellte Produkte
   */
  popular?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions".
 */
export interface Session {
  id: string;
  /**
   * Automatisch generiert oder manuell eingegeben
   */
  sessionName?: string | null;
  status: 'active' | 'closed';
  createdBy: string | Member;
  startTime?: string | null;
  /**
   * Null wenn Sitzung aktiv ist
   */
  endTime?: string | null;
  /**
   * Müssen VOR der Sitzungsaktivierung definiert werden
   */
  bartenders?:
    | {
        member: string | Member;
        estimatedStartTime?: string | null;
        estimatedEndTime?: string | null;
        bartenderStatus?: ('active' | 'pending' | 'approved') | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Wird automatisch aus Bestellungen berechnet
   */
  totalRevenue?: number | null;
  statistics?: {
    totalProductsSold?: number | null;
    mostPopularProduct?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: string;
  session: string | Session;
  member: string | Member;
  bartender: string | Member;
  items?:
    | {
        product: string | Product;
        quantity: number;
        /**
         * Historische Preisführung - speichert Produktpreis zum Bestellzeitpunkt
         */
        priceAtOrder: number;
        id?: string | null;
      }[]
    | null;
  /**
   * Berechnet aus Positionen (Anzahl × Preis zum Bestellzeitpunkt)
   */
  totalAmount: number;
  status?: ('pending' | 'completed' | 'cancelled') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payments".
 */
export interface Payment {
  id: string;
  member: string | Member;
  /**
   * Positiv für Zahlungen, negativ für Strafen
   */
  amount: number;
  type: 'payment' | 'penalty' | 'adjustment';
  date: string;
  /**
   * Notizen zu dieser Transaktion
   */
  notes?: string | null;
  admin?: (string | null) | Member;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'members';
        value: string | Member;
      } | null)
    | ({
        relationTo: 'ranks';
        value: string | Rank;
      } | null)
    | ({
        relationTo: 'products';
        value: string | Product;
      } | null)
    | ({
        relationTo: 'sessions';
        value: string | Session;
      } | null)
    | ({
        relationTo: 'orders';
        value: string | Order;
      } | null)
    | ({
        relationTo: 'payments';
        value: string | Payment;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'members';
    value: string | Member;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'members';
    value: string | Member;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "members_select".
 */
export interface MembersSelect<T extends boolean = true> {
  role?: T;
  firstName?: T;
  lastName?: T;
  couleurname?: T;
  profilePicture?: T;
  rank?: T;
  tabBalance?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ranks_select".
 */
export interface RanksSelect<T extends boolean = true> {
  label?: T;
  value?: T;
  colors?:
    | T
    | {
        color?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  name?: T;
  price?: T;
  category?: T;
  available?: T;
  popular?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions_select".
 */
export interface SessionsSelect<T extends boolean = true> {
  sessionName?: T;
  status?: T;
  createdBy?: T;
  startTime?: T;
  endTime?: T;
  bartenders?:
    | T
    | {
        member?: T;
        estimatedStartTime?: T;
        estimatedEndTime?: T;
        bartenderStatus?: T;
        id?: T;
      };
  totalRevenue?: T;
  statistics?:
    | T
    | {
        totalProductsSold?: T;
        mostPopularProduct?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  session?: T;
  member?: T;
  bartender?: T;
  items?:
    | T
    | {
        product?: T;
        quantity?: T;
        priceAtOrder?: T;
        id?: T;
      };
  totalAmount?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payments_select".
 */
export interface PaymentsSelect<T extends boolean = true> {
  member?: T;
  amount?: T;
  type?: T;
  date?: T;
  notes?: T;
  admin?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Allgemeine Einstellungen für die Verbindung
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  fraternityName: string;
  fraternityShortName?: string | null;
  logo?: (string | null) | Media;
  /**
   * Hex-Farbcode für die Primärfarbe im hellen Modus. Standard: #D00507. Diese Farbe wird automatisch als CSS-Variable gesetzt.
   */
  primaryColor?: string | null;
  /**
   * Hex-Farbcode für die Primärfarbe im dunklen Modus. Standard: #CC3335. Optional - falls nicht gesetzt, wird die Hell-Modus-Farbe (#D00507) verwendet.
   */
  primaryColorDark?: string | null;
  /**
   * Allgemeine Kontakt-E-Mail-Adresse für Anfragen
   */
  contactEmail?: string | null;
  /**
   * E-Mail-Adresse für Barkeeper-bezogene Anfragen und Koordination
   */
  bartenderEmail?: string | null;
  websiteUrl?: string | null;
  address?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  fraternityName?: T;
  fraternityShortName?: T;
  logo?: T;
  primaryColor?: T;
  primaryColorDark?: T;
  contactEmail?: T;
  bartenderEmail?: T;
  websiteUrl?: T;
  address?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}